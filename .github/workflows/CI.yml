name: Build itemzflow app

on: push

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup
      env:
        BASE_PATH: ${{ runner.tool_cache }}/ps4
      run: |
        mkdir ${{ env.BASE_PATH }}
        sudo apt-get install unzip
        curl -sL https://github.com/LightningMods/OpenOrbis-PS4-Toolchain/releases/download/v0.50001/orbisdev.zip -o orbisdev.zip
        unzip orbisdev.zip -d ${{ env.BASE_PATH }}
        sudo chmod 0777 -R ${{ env.BASE_PATH }} 
        curl -sL https://github.com/LightningMods/OpenOrbis-PS4-Toolchain/releases/download/v0.50001/OOSDK.tar.gz | tar xz -C ${{ env.BASE_PATH }}

        # export first to set globally for $path
        # echo "OO_PS4_TOOLCHAIN=${{ env.BASE_PATH }}/OpenOrbis/PS4Toolchain" >> $GITHUB_ENV
        export ORBISDEV=${{ env.BASE_PATH }}/orbisdev
        echo "ORBISDEV=${{ env.BASE_PATH }}/orbisdev" >> $GITHUB_ENV
        echo "PATH=$ORBISDEV/bin:$PATH" >> $GITHUB_ENV
        wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O $BASE_PATH/packages-microsoft-prod.deb
        sudo dpkg -i ${{ env.BASE_PATH }}/packages-microsoft-prod.deb
        rm ${{ env.BASE_PATH }}/packages-microsoft-prod.deb
        sudo apt update
        sudo apt install make python2 dotnet-runtime-3.1 dotnet-sdk-3.1 llvm lld

    - name: Cache object files
      id: cache-objs
      uses: actions/cache@v3
      with:
        path: |
          external/**/*.a
          external/**/*.o
          external/**/*.elf
          external/**/*.oelf
          external/**/*.prx
        key: ${{ runner.os }}-obj

    - name: Build dependencies
      if: steps.cache-objs.outputs.cache-hit != 'true'
      working-directory: external/taglib
      run: |
        make -j$(nproc)
        cd ../libfuse
        make -j$(nproc)
        cd ../libdumper
        make -j$(nproc)

    - name: Install dependencies
      working-directory: external/taglib
      run: |
        make install
        cd ../libfuse
        make install
        cd ../libdumper
        make install

    - name: Build daemon
      working-directory: itemz-daemon
      run: |
        make clean
        make -j$(nproc)
        make oelf
        make eboot

    - name: Build loader
      working-directory: itemz-loader
      run: |
        make clean
        make -j$(nproc)
        make oelf
        make eboot

    - name: Build app
      working-directory: itemzflow
      run: |
        make clean
        make -j$(nproc)
        make oelf
        make eboot
        make pkg_build

    - name: Upload itemzflow binaries
      uses: actions/upload-artifact@v3
      with:
        name: Itemzflow binaries
        path: |
          itemz-daemon/bin/*
          itemz-loader/bin/*
          itemzflow/bin/*

    - name: Upload itemzflow PKG
      uses: actions/upload-artifact@v3
      with:
        name: IV0002-ITEM00001_00-STOREUPD00000000
        path: itemzflow/IV0002-ITEM00001_00-STOREUPD00000000.pkg
        if-no-files-found: error